This is possible because functions are a first-class value in Scala. What does that mean?

It means that functions can be passed as arguments to other functions, and functions can return other functions.

The map function is a classic example of a higher order function.

=============================================================
def computeArea(l:Int=5, b:Int, f:(Int, Int) => Int) = f(l,b)
computeArea(1,20,(x,y)=>x*y*y)
400
computeArea(1,20,(x,y)=>x*y)
20

val superFunction: (int,(String,(Int => Boolean)) => Int) => (Int,Int) = ???
SUPERfUNCITON TAKES FUCTIONS AS PARAMETER AND RETURN FUCNTION(INT => INT)

// A function that applies n time on a value
// nTimes(f,n,x)
// ntime(f, 3, x) = f(f(f(x))) = nTimes(f, 2, f(x)) = 

//increament by 1 function
val onePlus:Int=>Int = x => x + 1

//higher order fucntions
def nTimes(f:Int=>Int, n:Int, x:Int):Int = if(n<=0) x else nTimes(f,n-1,f(x))
//call
nTimes(onePlus,10,1) output 11
or
nTimes(x=>x+1,10,1) output 11

// another approach
// ntp(f,n) = x => f(f(f(f.(x))))))
//increament10 = ntp(onePlus,10) = x => onePlus(onePlus(onePlus(x)))
// val y = increament10(1)
nTimeBetter : return a lambda from function
def nTimesBetter(f:Int=>Int,n:Int):(Int=>Int) = if (n<=0) (x:Int)=>x else (x:Int) => nTimesBetter(f,n-1)(f(x))
//define lambda
val plus10 = nTimesBetter(x=>x+1, 10)
// call 
plus10(1) output 11

//this type of nTimesBetter(f,n-1)(f(x) of writting we noticed in 
// curriedFucntions
val supperAdder: Int => Int => Int = (x:int) => (y:Int) = > x +y
//call 
supperAdder(3)(10)

FUCNTION TAKES MULTIPLE PARAMETER LIST AND RETURN FUCNTION
def nTimes(f:(BigInt => BigInt),n:Int):(BigInt=>BigInt) = if ( n<=0 ) (x:BigInt)=>x else (x:BigInt) => nTimes(f,n-1)(f(x))

VAL increamentBy10 = nTimes(x=>x+1,10)
increamentBy10(5) output 15

val power4 = nTimes(x=>x*x,2)
power4(5) output 625
power4(2) output 16

likewise cube etc




//this is very useful if we can can actually used to define sub function which we can actually apply later
//like
val add3 = supperAdder(3)

add3(10) : output 13

//funcitons with multiple parameter lists
def curriedFormatter(s:String)(x:Double):String = s.format(x) 
val standardFormat:(Double => String) = curriedFormatter("%4.2f") 
//call 
standardFormat(Math.PI)

To define smaller function , we have to mention types (doble => string)

MULTIPLE PARAMETER LISTS (CURRYING)
foldLeft applies a two-parameter function op to an initial value z and all elements of this collection, going left to right. Shown below is an example of its usage.
Starting with an initial value of 0, foldLeft here applies the function (m, n) => m + n to each element in the List and the previous accumulated value.

val numbers = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
val res = numbers.foldLeft(0)((m, n) => m + n)
println(res) // 55

USE CASE
SINGLE FUNCTIONAL PARAMETER
In case of a single functional parameter, like op in the case of foldLeft above, multiple parameter lists allow a concise syntax to pass an anonymous function to the method. Without multiple parameter lists, the code would look like this:

numbers.foldLeft(0, (m: Int, n: Int) => m + n)
Note that the use of multiple parameter lists here also allows us to take advantage of Scala type inference to make the code more concise, like this:

numbers.foldLeft(0)(_ + _)
this would not be possible with only a single parameter list, as the Scala compiler would not be able to infer the parameter types of the function.

IMPLICIT PARAMETERS
To specify only certain parameters as implicit, they must be placed in their own implicit parameter list.
def execute(arg: Int)(implicit ec: scala.concurrent.ExecutionContext) = ???

PARTIAL APPLICATION
When a method is called with a fewer number of parameter lists, then this will yield a function taking the missing parameter lists as its arguments. This is formally known as partial application.

For example,
val numbers = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
val numberFunc = numbers.foldLeft(List[Int]()) _

val squares = numberFunc((xs, x) => xs :+ x*x)
println(squares) // List(1, 4, 9, 16, 25, 36, 49, 64, 81, 100)

val cubes = numberFunc((xs, x) => xs :+ x*x*x)
println(cubes)  // List(1, 8, 27, 64, 125, 216, 343, 512, 729, 1000)
