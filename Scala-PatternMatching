DEFINE PATTERN:
we import Regex class:scala.util.matching.Regex to deifne new patter
or
use (.r) with pattern string

val mypatern = "(\d)".r
or
val numPattern = new Regex("[0-9]+")

create patter:
[] - define a range for num/char eg [0-9a-zA-Z] 
with NOt [^0-9a-zA-Z]
{} to mention no of iteration eg 2 digit no [0-9]{2} or (\d){2} or 0 or 2 time, more time {0,2} {0,} leave blank for more
() making group of character eg date "(\d\d)-(\d\d)-(\d\d\d\d)"
. for any character eg first two chara are num and rest can any "(\d){2}."

==============================================================

Methods of pattern class
val address = "123 Main Street Suite 101"
numPattern = new Regex("[0-9]+")

val match1 = numPattern.findFirstIn(address)
val match1 = numPattern.findFirstIn(address)


1.7. Replacing Patterns in Strings

You can call replaceAll on a String, remembering to assign the result to a new variable:
val address = "123 Main Street".replaceAll("[0-9]", "x")

You can create a regular expression and then call replaceAllIn on that expression
val regex = "[0-9]".r
val newAddress = regex.replaceAllIn("123 Main Street", "x")


1.8. Extracting Parts of a String That Match Patterns
You want to extract one or more parts of a string that match the regular-expression
patterns you specify.
Define the regular-expression patterns you want to extract, placing parentheses around
them so you can extract them as “regular-expression groups.” First, define the desired
pattern:
val pattern = "([0-9]+) ([A-Za-z]+)".r
scala> val pattern(count, fruit) = "100 Bananas"
count: String = 100
fruit: String = Bananas

count and fruit are variables and 

For example purposes, you’ll just allow these two simplified patterns:first patter get store in count and second in fruit

// match "movies 80301"
val MoviesZipRE = "movies (\\d{5})".r
// match "movies near boulder, co"
val MoviesNearCityStateRE = "movies near ([a-z]+), ([a-z]{2})".r

Once you’ve defined the patterns you want to allow, you can match them against whatµ
ever text the user enters, using a match expression. In this example, you’ll call a fictional
method named getSearchResults when a match occurs:
textUserTyped match {
case MoviesZipRE(zip) => getSearchResults(zip)
case MoviesNearCityStateRE(city, state) => getSearchResults(city, state)
case _ => println("did not match a regex")
}

NOTE: WE CAN DIRECTLY GET THE PATTER VALUE IN VARIABLES

EXAMPLE OF CASE CLASS
val personMatch = Person("dhirender",36) match{case Person(n,a) => s"Hi, I am $n and I am $a years old"; case _ => "not matched";}

trait expr
case class sum(a:expr,b:expr) extends expr
case class prod(a:expr,b:expr) extends expr
case class num(a:Int) extends expr

def show(e:expr):String = e match{
case sum(e1,e2) => show(e1)+" + "+show(e2)
case num(n) => s"$n"
case prod(e1,e2) =>{
	def maybeshowparentheses(exp :expr) = exp match{
		case prod(_,_) => show(exp)
		case num(_) => show(exp)
		case _ => "(" +show(exp)+")"
		}
	maybeshowparentheses(e1) + "*" + maybeshowparentheses(e2)
	} 
}

//call
show(sum(num(1),num(2)))

show(prod(sum(num(1),num(2)),num(2)))

show(prod(sum(num(1),num(2)),sum(num(1),num(2))))
show(prod(sum(num(1),num(2)),prod(num(1),num(2))))
==================================================================================



All THE PATTERNS
------------------------
1. constants
object AllThePattern extends App{
val x :Any = "scala"
val constants = x match{
case 1 => "a number"
case "scala" => "the scala"
case true => "the truth"
case AllThePattern => "singleton object"
 }
 
 2. Matching Anything
 2.1. wild card
 val wildcard = x match{
 case _ => 
 }
 
 2.2 variable
 val matchAVariable = x match{
 	case something => s" we can latter access $something"
 }
 
 2.3 tuples
 val atuple =(1,2)
 val matchTuple = atuple match {
 	case (1,1) => "found 1 1"
	case (something,2) => s"found $something"
	case (_,(1,v)) => "nested tuple found $v" // nested tuple in pattern matching
 }
 
 2.4 case class / constructor pattern
 
 
 2.5 list pattern
 val slist =List(1,2,3,4)
 val smatch = slist match{
 	case List(1,_,_,_) => ""
	case List(1,_*) => "arbitrary length list"
	case 1::List(_) => infix pattern
	case List(1,2,3) :+ 42 => //infix pattern
 }
 
 2.6 type specifier
 val unknown :Any = 2
 val unknownMatch = unknown match{
 	case list:List[Int] => 
	case _ => 
 }
 
 2.7 name binding
 val namebindingmatch = alist match{
 	case nonempty @ cons(_,_) => "use the name later here"
	case cons(1, rest @ cons(2,_) ) => "nested name binding"
 }
 
 2.8 multi pattern : use pipe(|) operators logical OR
 case empty | case (0,_) => 
 
 2.9 if gard
 val sepcialElement = alist match{
 	case cons (1,cons(specialele,_)) if specialele % 2 == 0 => 
 }
 
 
 HARD QUESTION:
 val numbers = List(1,2,3,4)
 val numMatch = numbers match{
 case listOfString:List[String] => "a string list"
 case listOfNumber:List[Number] => "a number list"
 case _ => ""
 }
 println(numMatch) // output will be "a string list " instead of "a number list"
 BECAUSE
So long story short is that the JVM was designed for the Java language but the Java language was also
designed with backwards compatibility in mind.
So basically a Java 9 program right now where a Java 9 JVM can run a Java one program written 20 years
ago which is pretty darn cool.
I'll give them credit for that.
But at Java one Java did not have generic parameters.
Generics were introduced in Java 5.

And to make the JVM compatible with Java one Java 5 compiler is raised all generic types after type
checking which makes the JVM absolutely oblivious to generic types Skala also suffers from this fault
because the JVM was designed in this way.

So basically after type checking our pattern match expressions looks like this because our type parameters
just are erased like that and when the pattern match looks like this then suddenly everything makes
sense because numbers is a list and a list matches a list which returns a list of strings.
Right.


 }
