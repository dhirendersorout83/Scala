object Generics extends App{
// 
class MyList[A]{
  // use type A
}
val mylist = Mylist[Integer];
val mylist = Mylist[String];

// traits can also be generic type but object can not have parameters but methods define in object can have

object MyList{
  def empty[A]:MyList[A]=???
}
val emptylist = MyList.empty[Integer] // using object method to define list

// variance problem
class Animal
Class Dog extends Animal
Class Cat extends Animal

Question: if cat extends animal, does the list of cat extends list of animal
There posible three options
1 : Yes: list[cat] extends list[animal] // this is called covariance 
class covariance[+A]
val animal:Animal = new Cat
val animallist:covariance[Animal]=new covariance[Cat]
// question is : animallist.add(new Dog) : HARD QUESTION

2 : NO: Invariance List. list[animal] is different from list[cat], can not substitute one for another
class Invariance[A]
val invariantList:Animal = new Invariace[Cat] // can not do
val invariantList:Animal = new Invariace[Animal] // valid

3. ContraVariance
class Controvariance[-A]
val covariance:Controvariance[Cat] = new Controvariance[Animal] // we can say, all animal are not cat. it is kind of weired but in case of variance was valid which say all cat is also animal(val animallist:covariance[Animal]=new covariance[Cat])
But now if we define covariance as Trainer than it makes sence, trainer of animal can also be trainer of cat.
class Trainer[-A]
val trainer:Trainer[Cat] = new Trainer[Animal]


// bounded type
class cage[A <: Animal] // A can have a sub type of Animal. it is restriction on generic type


}
